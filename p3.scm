#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 4613 0 17 3 29 #"; Programming Project, Part 3"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; Ryan Rose, rtr29 | Ben Moore, bcm45 | Aaron Magid, ahm64"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; Load the function parser"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"load"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"functionParser.scm\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 13 #"racket/format"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9        1561 21           0 0           0 259 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 6 #"; test"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"testPrograms"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 19 3 14 #"\"TestBool.txt\""
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #")("
0 0 19 3 17 #"\"TestProgram.txt\""
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #")("
0 0 19 3 11 #"\"Test1.txt\""
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #")("
0 0 19 3 11 #"\"Test2.txt\""
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 2 #")("
0 0 19 3 11 #"\"Test3.txt\""
0 0 24 3 1 #" "
0 0 21 3 2 #"45"
0 0 24 3 2 #")("
0 0 19 3 11 #"\"Test4.txt\""
0 0 24 3 1 #" "
0 0 21 3 2 #"55"
0 0 24 3 2 #")("
0 0 19 3 11 #"\"Test5.txt\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 19 3 11 #"\"Test6.txt\""
0 0 24 3 1 #" "
0 0 21 3 3 #"115"
0 0 24 3 2 #")("
0 0 19 3 11 #"\"Test7.txt\""
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #")("
0 0 19 3 11 #"\"Test8.txt\""
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 2 #")("
0 0 19 3 11 #"\"Test9.txt\""
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 2 #")("
0 0 19 3 12 #"\"Test10.txt\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #")("
0 0 19 3 12 #"\"Test11.txt\""
0 0 24 3 1 #" "
0 0 21 3 2 #"35"
0 0 24 3 2 #")("
0 0 19 3 12 #"\"Test13.txt\""
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 2 #")("
0 0 19 3 12 #"\"Test14.txt\""
0 0 24 3 1 #" "
0 0 21 3 2 #"69"
0 0 24 3 2 #")("
0 0 19 3 12 #"\"Test15.txt\""
0 0 24 3 1 #" "
0 0 21 3 2 #"87"
0 0 24 3 2 #")("
0 0 19 3 12 #"\"Test16.txt\""
0 0 24 3 1 #" "
0 0 21 3 2 #"64"
0 0 24 3 2 #")("
0 0 19 3 12 #"\"Test18.txt\""
0 0 24 3 1 #" "
0 0 21 3 3 #"125"
0 0 24 3 2 #")("
0 0 19 3 12 #"\"Test19.txt\""
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #")("
0 0 19 3 12 #"\"Test20.txt\""
0 0 24 3 1 #" "
0 0 21 3 7 #"2000400"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"testInterpreter"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 12 #"testPrograms"
0 0 24 3 1 #" "
0 0 14 3 6 #"passed"
0 0 24 3 1 #" "
0 0 14 3 6 #"failed"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 12 #"testPrograms"
0 0 24 3 3 #") ("
0 0 14 3 11 #"display-all"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Passed: \""
0 0 24 3 1 #" "
0 0 14 3 6 #"passed"
0 0 24 3 1 #" "
0 0 19 3 5 #"\" - \""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Failed: \""
0 0 24 3 1 #" "
0 0 14 3 6 #"failed"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 12 #"testPrograms"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 5 #"\" - \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 12 #"testPrograms"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"cadar"
0 0 24 3 1 #" "
0 0 14 3 12 #"testPrograms"
0 0 24 3 3 #")) "
0 0 19 3 8 #"\"PASSED\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"FAILED\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 12 #"testPrograms"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"cadar"
0 0 24 3 1 #" "
0 0 14 3 12 #"testPrograms"
0 0 24 3 4 #")) ("
0 0 14 3 15 #"testInterpreter"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 12 #"testPrograms"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 6 #"passed"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 6 #"failed"
0 0 24 3 3 #") ("
0 0 14 3 15 #"testInterpreter"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 12 #"testPrograms"
0 0 24 3 2 #") "
0 0 14 3 6 #"passed"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 6 #"failed"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; Shorthand for testing"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"testInterpreter"
0 0 24 3 1 #" "
0 0 14 3 12 #"testPrograms"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"display-all"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 2 #"vs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"for-each"
0 0 24 3 1 #" "
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 2 #"vs"
0 0 24 3 2 #"))"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 50 #"; interpret - the primary call to interpret a file"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; inputs:"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";  fd - file name of code to be interpreted"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; outputs:"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";  The evaluation of the code"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"interpret"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"fd"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"selectReturn"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"call/cc"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"finalReturn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"state"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"extractState"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"call/cc"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 11 #"interpreter"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parser"
0 0 24 3 1 #" "
0 0 14 3 2 #"fd"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 10 #"((() ())) "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 13 #"continueError"
0 0 24 3 1 #" "
0 0 14 3 10 #"breakError"
0 0 24 3 1 #" "
0 0 14 3 10 #"throwError"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"getVal"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"main"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 10 #"throwError"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"selectReturn"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"returnVals"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"extractValue"
0 0 24 3 1 #" "
0 0 14 3 10 #"returnVals"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"extractState"
0 0 24 3 1 #" "
0 0 14 3 10 #"returnVals"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"boolHandle"
0 0 24 3 2 #" ("
0 0 14 3 12 #"extractValue"
0 0 24 3 1 #" "
0 0 14 3 10 #"returnVals"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"boolHandle"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #") "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 6 #") ))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"continueError"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 47 #"\"CONTINUATION ERROR: Continue outside of loop!\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"breakError"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 37 #"\"BREAK ERROR: Break outside of loop!\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"throwError"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 10 #"buildError"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"UNCAUGHT EXCEPTION: \""
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 5 #")) ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"buildError"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~a"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"\\n\""
0 0 24 3 10 #") ))      "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #"; interpreter"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; inputs:"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";  pt - parse tree"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";  s - state"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";  [continuations]"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; outputs:"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";  The return value of the code and a state"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 14 #"; ABSTRACTIONS"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"getRemainingStatements"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"getFirstOperation"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"getOperands"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cdar"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"getFirstOperand"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 5 #"cadar"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"getSecondPlusOperands"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 5 #"cddar"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"getThirdPlusOperands"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 6 #"cdddar"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"getThirdOperand"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 20 #"getThirdPlusOperands"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"getSecondOperand"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 6 #"caddar"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; Continuations: Break, Continue, Return, Throw"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"interpreter"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"pt"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 8 #"valState"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getFirstOperation"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"interpreter"
0 0 24 3 2 #" ("
0 0 14 3 22 #"getRemainingStatements"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getFirstOperation"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"var"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interpreter"
0 0 24 3 2 #" ("
0 0 14 3 22 #"getRemainingStatements"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 6 #"decVal"
0 0 24 3 2 #" ("
0 0 14 3 15 #"getFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 21 #"getSecondPlusOperands"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 4 #")) ("
0 0 14 3 21 #"getSecondPlusOperands"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 16 #"getSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #")) "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 21 #"getSecondPlusOperands"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 4 #")) ("
0 0 14 3 21 #"getSecondPlusOperands"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 16 #"getSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #")) "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #"))) "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getFirstOperation"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"="
0 0 24 3 3 #") ("
0 0 14 3 11 #"interpreter"
0 0 24 3 2 #" ("
0 0 14 3 22 #"getRemainingStatements"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 8 #"m_assign"
0 0 24 3 2 #" ("
0 0 14 3 11 #"getOperands"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #") "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #"))  "
0 0 17 3 8 #"; if \"=\""
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getFirstOperation"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"return"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 10 #"finalState"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 15 #"getFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 10 #"finalState"
0 0 24 3 4 #"))) "
0 0 17 3 13 #"; if \"return\""
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getFirstOperation"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interpreter"
0 0 24 3 2 #" ("
0 0 14 3 22 #"getRemainingStatements"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 4 #"m_if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"getFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 16 #"getSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 20 #"getThirdPlusOperands"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 15 #"getThirdOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #")) "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #") "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #"))  "
0 0 17 3 9 #"; if \"if\""
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getFirstOperation"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"while"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interpreter"
0 0 24 3 2 #" ("
0 0 14 3 22 #"getRemainingStatements"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 7 #"call/cc"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"breakFunc"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_while"
0 0 24 3 2 #" ("
0 0 14 3 15 #"getFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 16 #"getSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 9 #"breakFunc"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #"))) "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #"))  "
0 0 17 3 12 #"; if \"while\""
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getFirstOperation"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 15 3 5 #"begin"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interpreter"
0 0 24 3 2 #" ("
0 0 14 3 22 #"getRemainingStatements"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 7 #"m_block"
0 0 24 3 2 #" ("
0 0 14 3 11 #"getOperands"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #") "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 17 3 12 #"; if \"begin\""
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getFirstOperation"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 8 #"continue"
0 0 24 3 3 #") ("
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getFirstOperation"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"break"
0 0 24 3 3 #") ("
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getFirstOperation"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"try"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interpreter"
0 0 24 3 2 #" ("
0 0 14 3 22 #"getRemainingStatements"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 5 #"m_try"
0 0 24 3 2 #" ("
0 0 14 3 15 #"getFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 16 #"getSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 15 #"getThirdOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #") "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getFirstOperation"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"throw"
0 0 24 3 3 #") ("
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 12 #"extractValue"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 15 #"getFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getFirstOperation"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 8 #"function"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interpreter"
0 0 24 3 2 #" ("
0 0 14 3 22 #"getRemainingStatements"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 15 3 10 #"defineFunc"
0 0 24 3 2 #" ("
0 0 14 3 15 #"getFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 16 #"getSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 15 #"getThirdOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getFirstOperation"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"funcall"
0 0 24 3 3 #") ("
0 0 14 3 11 #"interpreter"
0 0 24 3 2 #" ("
0 0 14 3 22 #"getRemainingStatements"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 12 #"extractState"
0 0 24 3 3 #" (("
0 0 14 3 6 #"getVal"
0 0 24 3 2 #" ("
0 0 14 3 15 #"getFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 11 #"resolveArgs"
0 0 24 3 2 #" ("
0 0 14 3 21 #"getSecondPlusOperands"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"tryState"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #" ("
0 0 14 3 12 #"restoreState"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 8 #"popLayer"
0 0 24 3 1 #" "
0 0 14 3 8 #"tryState"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 11 #"stateLength"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 11 #"stateLength"
0 0 24 3 2 #" ("
0 0 14 3 8 #"popLayer"
0 0 24 3 1 #" "
0 0 14 3 8 #"tryState"
0 0 24 3 5 #")))) "
0 0 14 3 1 #"e"
0 0 24 3 5 #")))) "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 10 #"buildError"
0 0 24 3 1 #" "
0 0 19 3 40 #"\"INTERPRETER ERROR: Invalid statement: \""
0 0 24 3 2 #" ("
0 0 14 3 17 #"getFirstOperation"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 34 #"; m_eval - evaluates an expression"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; inputs:"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";  st - statement"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";  s - state"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; outputs:"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";  Returns the value of the expression as well as an updated state"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 14 #"; ABSTRACTIONS"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"getStOperator"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"getStRemainingOperands"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"m_eval"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"st"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"atom?"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"getVal"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"NULL"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"getVal"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 10 #"buildError"
0 0 24 3 1 #" "
0 0 19 3 61
#"\"VAR ERROR: Variable used before declaration or assignment: \""
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"getVal"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"getStOperator"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"getStOperator"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 22 #"getStRemainingOperands"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"getStOperator"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"getStOperator"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"/"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"floor"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 6 #")))) ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"getStOperator"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"%"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"modulo"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"getStOperator"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"=="
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))  ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"getStOperator"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"!="
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))  ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 6 #")))) ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"getStOperator"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #">"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))  ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"getStOperator"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #">="
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))  ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"getStOperator"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"<"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))  ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"getStOperator"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"<="
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))  ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"getStOperator"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"!"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"getStOperator"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"&&"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))  ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"getStOperator"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"||"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))  ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 18 #"getStSecondOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"getStOperator"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"funcall"
0 0 24 3 4 #") (("
0 0 14 3 6 #"getVal"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 11 #"resolveArgs"
0 0 24 3 2 #" ("
0 0 14 3 22 #"getStRemainingOperands"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"tryState"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #" ("
0 0 14 3 12 #"restoreState"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 8 #"popLayer"
0 0 24 3 1 #" "
0 0 14 3 8 #"tryState"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 11 #"stateLength"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 11 #"stateLength"
0 0 24 3 2 #" ("
0 0 14 3 8 #"popLayer"
0 0 24 3 1 #" "
0 0 14 3 8 #"tryState"
0 0 24 3 5 #")))) "
0 0 14 3 1 #"e"
0 0 24 3 7 #"))   ))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 10 #"buildError"
0 0 24 3 1 #" "
0 0 19 3 37 #"\"ERROR: Unknown operator/statement: \""
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 7 #"))) )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 43 #"; m_assign - handles an assigment statement"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; inputs:"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";  st - statement"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";  s - state"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; outputs:"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";  The updated state"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 14 #"; ABSTRACTIONS"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"getVar"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"m_assign"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"st"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"setVal"
0 0 24 3 2 #" ("
0 0 14 3 6 #"getVar"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"getStFirstOperand"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #") ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 36 #"; m_if - handles a conditional block"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; inputs:"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";  condition - The condition on which to run the block"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";  ifblock - The block to run if condition is true"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";  elseblock - The block to run if condition is false (optional)"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";  state - The state before the condition is evaluated"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; outputs:"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";  The final state after evaluating the condition and, if applicable"
 #", running the block"
) 0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"m_if"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 7 #"ifblock"
0 0 24 3 1 #" "
0 0 14 3 9 #"elseblock"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"condition"
0 0 24 3 3 #") ("
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #" ("
0 0 14 3 10 #"buildError"
0 0 24 3 1 #" "
0 0 19 3 44 #"\"CONDITION ERROR: Condition cannot be null.\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 7 #"ifblock"
0 0 24 3 3 #") ("
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #" ("
0 0 14 3 10 #"buildError"
0 0 24 3 1 #" "
0 0 19 3 40 #"\"CONDITION ERROR: Block cannot be null.\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #" ("
0 0 14 3 10 #"buildError"
0 0 24 3 1 #" "
0 0 19 3 40 #"\"CONDITION ERROR: State cannot be null.\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 1 #" "
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"extractState"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interpreter"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 7 #"ifblock"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()) ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 1 #" "
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"elseblock"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 1 #" "
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"extractState"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interpreter"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 9 #"elseblock"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()) ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 1 #" "
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #"; decVal - declares and initializes a variable"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; inputs:"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";  name - variable name"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";  value - variable value"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";  state - the current state"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; outputs:"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";  The updated state"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; NOTES:"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";  We implemented decVal to allow a local variable to have the same "
 #"name as a"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";  variable in a different layer. It throws an error if you attept t"
 #"o declare"
) 0 0 24 29 1 #"\n"
0 0 17 3 45 #";  the same variable twice in the same layer."
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"decVal"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 24 #"; if name is null, error"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #" ("
0 0 14 3 10 #"buildError"
0 0 24 3 1 #" "
0 0 19 3 48 #"\"DECVAL ERROR: Failed adding variable to state.\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 39 #"; if the var name already exists, error"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 13 #"nameAvailable"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #" ("
0 0 14 3 10 #"buildError"
0 0 24 3 1 #" "
0 0 19 3 62
#"\"DECVAL NAMESPACE ERROR: Namespace for var already occupied: \""
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 29 #"; add name and value to state"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cadar"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 6 #"())) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 159
(
 #"; Check to see if this variable is already defined on this layer of "
 #"the state. That would be illegal. However, if the variable is declar"
 #"ed on a previous layer,"
) 0 0 24 29 1 #"\n"
0 0 17 3 45 #"; it can legally be redeclared on this layer."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"nameAvailable"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 9 #"varsLayer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"varsLayer"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"varsLayer"
0 0 24 3 2 #") "
0 0 14 3 4 #"name"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"nameAvailable"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"varsLayer"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 52 #"; setVal - sets the value of an initialized variable"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; inputs:"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";  name - variable name"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";  value - variable value"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";  state - the current state"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; outputs:"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";  The updated state"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"setVal"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 10 #"((()())) ("
0 0 14 3 10 #"buildError"
0 0 24 3 1 #" "
0 0 19 3 63
#"\"VARIABLE ERROR: Attempted assignment on undelcared variable: \""
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"result"
0 0 24 3 2 #" ("
0 0 14 3 7 #"call/cc"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"return"
0 0 24 3 3 #") ("
0 0 14 3 11 #"setValLayer"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 5 #"cadar"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 7 #"))))) ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 6 #"setVal"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"popLayer"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 6 #"())) ("
0 0 14 3 8 #"popLayer"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 12 #"))    ))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"setValLayer"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 3 #") ("
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 2 #") "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 3 #") ("
0 0 14 3 11 #"setValLayer"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 2 #") "
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; getVal - wrapper method for getVal* to deconstruct state variable "
 #"as necessary"
) 0 0 24 29 1 #"\n"
0 0 17 3 9 #"; inputs:"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";  name - the name of the variable to find"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";  state - the state to look in"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; outputs:"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";  See return values for getVal*"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"getVal"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 14 3 10 #"buildError"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"GETVAL"
0 0 19 3 1 #" "
0 0 19 3 6 #"ERROR:"
0 0 19 3 1 #" "
0 0 19 3 4 #"Name"
0 0 19 3 1 #" "
0 0 19 3 6 #"cannot"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 6 #" null."
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"NULL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 8 #"integer?"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 3 #")) "
0 0 14 3 4 #"name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"getVal*"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 5 #"cadar"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"NULL"
0 0 24 3 3 #") ("
0 0 14 3 6 #"getVal"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"getVal*"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 5 #"cadar"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #"; getVal* - gets the value of a given variable"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; inputs:"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";  name - the name of the variable to find"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";  vars - the list of variable names from the current state"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";  vals - the list of values in the current state"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; outputs:"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";  Value of variable, if initialized"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";  '() if defined but not initialized"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";  NULL if not defined"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"getVal*"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"NULL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 3 #") ("
0 0 14 3 7 #"getVal*"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #" ("
0 0 14 3 10 #"buildError"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"STATE"
0 0 19 3 1 #" "
0 0 19 3 8 #"MISMATCH"
0 0 19 3 1 #" "
0 0 19 3 6 #"ERROR:"
0 0 19 3 1 #" "
0 0 19 3 9 #"Different"
0 0 19 3 1 #" "
0 0 19 3 6 #"number"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 9 #"Variables"
0 0 19 3 1 #" "
0 0 19 3 3 #"and"
0 0 19 3 8 #" Values."
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 32 #"; m_while - handles a WHILE loop"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; inputs:"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";  condition - The condition on which to run the block"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";  block - The block to run if condition is true"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";  state - The state before the condition is evaluated"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; outputs:"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";  The final state after the condition evaluates to false"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"m_while"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"condition"
0 0 24 3 3 #") ("
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #" ("
0 0 14 3 10 #"buildError"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"LOOP"
0 0 19 3 1 #" "
0 0 19 3 6 #"ERROR:"
0 0 19 3 1 #" "
0 0 19 3 9 #"Condition"
0 0 19 3 1 #" "
0 0 19 3 6 #"cannot"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 6 #" null."
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 3 #") ("
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #" ("
0 0 14 3 10 #"buildError"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"LOOP"
0 0 19 3 1 #" "
0 0 19 3 6 #"ERROR:"
0 0 19 3 1 #" "
0 0 19 3 5 #"Block"
0 0 19 3 1 #" "
0 0 19 3 6 #"cannot"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 6 #" null."
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #" ("
0 0 14 3 10 #"buildError"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"LOOP"
0 0 19 3 1 #" "
0 0 19 3 6 #"ERROR:"
0 0 19 3 1 #" "
0 0 19 3 5 #"State"
0 0 19 3 1 #" "
0 0 19 3 6 #"cannot"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 6 #" null."
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 1 #" "
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"m_while"
0 0 24 3 1 #" "
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #" ("
0 0 14 3 7 #"call/cc"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cont_c"
0 0 24 3 3 #") ("
0 0 14 3 12 #"extractState"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interpreter"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()) ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 1 #" "
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")) "
0 0 14 3 6 #"return"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 6 #"cont_c"
0 0 24 3 2 #" ("
0 0 14 3 8 #"popLayer"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #"))) ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 6 #"cont_b"
0 0 24 3 2 #" ("
0 0 14 3 8 #"popLayer"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #"))) "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #")))) "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #") )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cont_b"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 1 #" "
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 27 #"; m_block - handles a block"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; inputs:"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";  block - The block to run"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";  state - The state before the block is evaluated"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; outputs:"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";  The final state after the condition evaluates to false"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"m_block"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"block"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"popLayer"
0 0 24 3 2 #" ("
0 0 14 3 12 #"extractState"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interpreter"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #" ("
0 0 14 3 8 #"addLayer"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #" ("
0 0 14 3 8 #"popLayer"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 8 #"))))) ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 62
#"; m_block_args - handles a block where arguments are passed in"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; inputs:"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";  block - The block to run"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";  state - The state before the block is evaluated"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; outputs:"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";  The final state after the condition evaluates to false"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"m_block_args"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"block"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"popLayer"
0 0 24 3 2 #" ("
0 0 14 3 12 #"extractState"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interpreter"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #" ("
0 0 14 3 8 #"popLayer"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 8 #"))))) ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 14 #"; ABSTRACTIONS"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"addLayer"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 8 #"(() ()) "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"popLayer"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 29 #"; m_try - handles a TRY block"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; inputs:"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";  block - The block to try"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";  catch - The associated CATCH code"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";  finally - The associated FINALLY code"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";  s - The initial state"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";  return - The continuation for RETURN statements"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";  cont_c - The continuation for CONTINUE statements"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";  cont_b - The continuation for BREAK statements"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";  cont_t - The previous continuation for THROW statements"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";  "
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; outputs:"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";  The final state after the TRY, CATCH and FINALLY blocks execute."
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"m_try"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"block"
0 0 24 3 1 #" "
0 0 15 3 5 #"catch"
0 0 24 3 1 #" "
0 0 14 3 7 #"finally"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"m_finally"
0 0 24 3 1 #" "
0 0 14 3 7 #"finally"
0 0 24 3 2 #" ("
0 0 14 3 7 #"call/cc"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"exit"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_block"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"tryState"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 76
(
 #"                                                                    "
 #"       ("
) 0 0 14 3 4 #"exit"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_catch"
0 0 24 3 1 #" "
0 0 15 3 5 #"catch"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 8 #"tryState"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 8 #"))))))) "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #")) )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 38 #"; m_catch - handles a caught exception"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; inputs:"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";  catch - The associated CATCH code"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";  e - exception thrown"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";  s - The state when exception was thrown"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";  return - The continuation for RETURN statements"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";  cont_c - The continuation for CONTINUE statements"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";  cont_b - The continuation for BREAK statements"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";  cont_t - The previous continuation for THROW statements"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";  "
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; outputs:"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";  The final state after the CATCH block executes."
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"m_catch"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 15 3 5 #"catch"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 15 3 5 #"catch"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 12 #"m_block_args"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 15 3 5 #"catch"
0 0 24 3 3 #") ("
0 0 14 3 6 #"decVal"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caadr"
0 0 24 3 1 #" "
0 0 15 3 5 #"catch"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 2 #" ("
0 0 14 3 8 #"addLayer"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")) "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 6 #")) )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 37 #"; m_finally - handles a finally block"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; inputs:"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";  finally - The associated FINALLY code"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";  s - The state after try/catch was thrown"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";  return - The continuation for RETURN statements"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";  cont_c - The continuation for CONTINUE statements"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";  cont_b - The continuation for BREAK statements"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";  cont_t - The previous continuation for THROW statements"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";  "
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; outputs:"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";  The final state after the finally block executes."
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"m_finally"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"finally"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 7 #"finally"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"m_block"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 7 #"finally"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_c"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_b"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 6 #")) )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 58
#"; defineFunc - Defines a function and adds it to the state"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; inputs:"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";   name - The name of the function"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";   args - A list of arguments for the function"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   block - The code in the body of the function"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";   s - The state at the time of the definition"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; outputs:"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";   The final state with this function added on"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 15 3 10 #"defineFunc"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"decVal"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"argList"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";              (display \""
0 0 17 3 7 #"running"
0 0 17 3 26 #" \")(display name)(newline)"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"newState"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_func"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 7 #"addArgs"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 7 #"argList"
0 0 24 3 2 #" ("
0 0 14 3 11 #"reduceState"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"stateLength"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 11 #"stateLength"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 11 #"stateLength"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #")))) "
0 0 14 3 6 #"cont_t"
0 0 24 3 2 #") "
0 0 14 3 6 #"cont_t"
0 0 24 3 5 #"))) ("
0 0 14 3 8 #"valState"
0 0 24 3 2 #" ("
0 0 14 3 12 #"extractValue"
0 0 24 3 1 #" "
0 0 14 3 8 #"newState"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 11 #"stateLength"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 11 #"stateLength"
0 0 24 3 2 #" ("
0 0 14 3 12 #"extractState"
0 0 24 3 1 #" "
0 0 14 3 8 #"newState"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 189
(
 #"                                                                    "
 #"                                                                    "
 #"                                                    ("
) 0 0 14 3 12 #"restoreState"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 2 #" ("
0 0 14 3 12 #"extractState"
0 0 24 3 1 #" "
0 0 14 3 8 #"newState"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 11 #"stateLength"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 11 #"stateLength"
0 0 24 3 2 #" ("
0 0 14 3 12 #"extractState"
0 0 24 3 1 #" "
0 0 14 3 8 #"newState"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 189
(
 #"                                                                    "
 #"                                                                    "
 #"                                                    ("
) 0 0 14 3 8 #"popLayer"
0 0 24 3 2 #" ("
0 0 14 3 12 #"extractState"
0 0 24 3 1 #" "
0 0 14 3 8 #"newState"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 192
(
 #"                                                                    "
 #"                                                                    "
 #"                                                    ))) "
) 0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"reduceState"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 12 #"removeLayers"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 12 #"removeLayers"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 11 #"reduceState"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 12 #"removeLayers"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"stateLength"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"atom?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"stateLength"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"stateLength"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"listLength"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"listLength"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"restoreState"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"original"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 1 #" "
0 0 14 3 9 #"addLayers"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 9 #"addLayers"
0 0 24 3 2 #") "
0 0 14 3 3 #"new"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"original"
0 0 24 3 3 #") ("
0 0 14 3 12 #"restoreState"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"original"
0 0 24 3 2 #") "
0 0 14 3 3 #"new"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 9 #"addLayers"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 101
(
 #"; addArgs - Adds the arguments to a function onto a new state layer "
 #"(DYNAMIC SCOPING + CALL BY VALUE)"
) 0 0 24 29 1 #"\n"
0 0 17 3 9 #"; inputs:"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";   argNames - The names of the arguments"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";   argValues - The values of the arguments"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";   state - The state prior to adding the arguments"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; outputs:"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";   The updated state with arguments on a new layer"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"addArgs"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"argNames"
0 0 24 3 1 #" "
0 0 14 3 9 #"argValues"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"listLength"
0 0 24 3 1 #" "
0 0 14 3 8 #"argNames"
0 0 24 3 3 #") ("
0 0 14 3 10 #"listLength"
0 0 24 3 1 #" "
0 0 14 3 9 #"argValues"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 8 #"ARGUMENT"
0 0 19 3 1 #" "
0 0 19 3 5 #"COUNT"
0 0 19 3 1 #" "
0 0 19 3 9 #"MISMATCH:"
0 0 19 3 1 #" "
0 0 19 3 5 #"Given"
0 0 19 3 1 #" "
0 0 19 3 9 #"incorrect"
0 0 19 3 1 #" "
0 0 19 3 6 #"number"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 11 #"arguments.\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 8 #"argNames"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 9 #"argValues"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())) "
0 0 14 3 5 #"state"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 62
#"; resolveArgs - Resolves the argument list to a list of values"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; inputs:"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";   argList - The list of arguments to resolve"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";   state - The state prior to adding the arguments"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; outputs:"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";   The updated state with arguments on a new layer"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"resolveArgs"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"argList"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 7 #"argList"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"argList"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"extractValue"
0 0 24 3 2 #" ("
0 0 14 3 6 #"m_eval"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"argList"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"resolveArgs"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"argList"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"getVal"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"argList"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 3 #") ("
0 0 14 3 11 #"resolveArgs"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"argList"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #"; m_func - Runs a function"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; inputs:"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";   block - The internal block of the function"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";   s - The state at the time of the function call, with arguments a"
 #"pplied"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";   cont_t - The throw continuation from the point of the function c"
 #"all"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; outputs:"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";   The final state after this function has run"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"m_func"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"block"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 18 #"clearFunctionState"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"call/cc"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 11 #"interpreter"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 13 #"continueError"
0 0 24 3 1 #" "
0 0 14 3 10 #"breakError"
0 0 24 3 1 #" "
0 0 14 3 6 #"cont_t"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"clearFunctionState"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"returnVals"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"extractValue"
0 0 24 3 1 #" "
0 0 14 3 10 #"returnVals"
0 0 24 3 3 #") ("
0 0 14 3 8 #"popLayer"
0 0 24 3 2 #" ("
0 0 14 3 12 #"extractState"
0 0 24 3 1 #" "
0 0 14 3 10 #"returnVals"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"valState"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"extractValue"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"returnVals"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 10 #"returnVals"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"extractState"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"returnVals"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 10 #"returnVals"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 7 #"; atom?"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; ------------------------------------------------------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"atom?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 6 #"))) ))"
0           0
